ggarrange(npp, mpp)
n <- 100   #number of nodes
s <- 1 # Zipf paramter
zipf <- (1:n)^(-s)
mana <- zipf/sum(zipf)
R <- 50   #minimal amount of possible peers to the up and to the down, i.e. at least 2R possible peers
rho <- 2
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((mana[i] < mana[j]*rho)){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
preferenceMatrix <- matrix(0, ncol=n, nrow=n)
for ( i in 1:n){
preferenceMatrix[i,] <- sample((1:n), n, replace=FALSE)
}
k <- 4
outNeighbors <- matrix(0, ncol=k, nrow=n)
inNeighbors <- matrix(0, ncol=k, nrow=n)
numberOfIteration <- 1000000
for (i in 1:numberOfIteration){
outNode <- sample(1:n,1)
possiblePeerList <- which(possiblePeers[outNode,]==1)
outCandidate <- sample(possiblePeerList,1)
outCondition <- F
if (sum(outNeighbors[outNode, ] == 0) > 0) {
outCondition <- T
} else if (max(preferenceMatrix[outNode, outNeighbors[outNode, ]]) > preferenceMatrix[outNode, outCandidate])   {
outCondition <- T
}
if (outCondition){
inCondition <- F
if (sum(inNeighbors[outCandidate,]==0) > 0){
inCondition <- T
} else if (max(preferenceMatrix[outCandidate, inNeighbors[outCandidate,]]) > preferenceMatrix[outCandidate, outNode])   {
inCondition <- T
}
if (inCondition){
# update links of outNode
if (sum(outNeighbors[outNode, ] == 0) == 0){
# find node to drop
maxOut <- max(preferenceMatrix[outNode, outNeighbors[outNode, ]])
idDropOut <- which(preferenceMatrix[outNode,]==maxOut)
# replace this node with new node
x <- outNeighbors[outNode,]
replace(x, x==idDropOut, outCandidate)
outNeighbors[outNode,] <- x
# remove nodeOut from inlist of idDropOut
x <- inNeighbors[idDropOut,]
replace(x, x==outNode, 0)
inNeighbors[idDropOut,] <- x
} else {
# there is nobody to drop but outNeighbors has to be updated
x <- outNeighbors[outNode,]
x[min(which(x==0))] <- outCandidate
outNeighbors[outNode,] <- x
}
# update links of outCandidate
if (sum(inNeighbors[outCandidate, ] == 0) == 0){
# find node to drop
maxIn <- max(preferenceMatrix[outCandidate, inNeighbors[outCandidate, ]])
idDropIn <- which(preferenceMatrix[outCandidate,]==maxIn)
# replace this node with new node
x <- inNeighbors[outCandidate,]
replace(x, x==idDropIn, outNode)
inNeighbors[outCandidate,] <- x
# remove nodeCandidate from outlist of idDropIn
x <- outNeighbors[idDropIn,]
replace(x, x==outCandidate, 0)
inNeighbors[idDropIn,] <- x
} else {
# there is nobody to drop but inNeighbors has to be updated
x <- inNeighbors[outCandidate,]
x[min(which(x==0))] <- outNode
inNeighbors[outCandidate,] <- x
}
}
}
}
adjacencyMatrix <- matrix(0, n, n)
for (i in 1:n){
for (j in outNeighbors[i,]){
if (j!=0) {
adjacencyMatrix[i,j] <- 1
adjacencyMatrix[j,i] <- 1
}
}
}
n <- 100   #number of nodes
s <- 1 # Zipf paramter
zipf <- (1:n)^(-s)
mana <- zipf/sum(zipf)
R <- 20   #minimal amount of possible peers to the up and to the down, i.e. at least 2R possible peers
rho <- 2
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((mana[i] < mana[j]*rho)){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df1 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor(rep("rho",n)))
npp <- ggplot(df1, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df1, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
n <- 1000   #number of nodes
s <- 1 # Zipf paramter
zipf <- (1:n)^(-s)
mana <- zipf/sum(zipf)
R <- 0   #minimal amount of possible peers to the up and to the down, i.e. at least 2R possible peers
rho <- 2
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((mana[i] < mana[j]*rho)){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df1 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor(rep("rho",n)))
npp <- ggplot(df1, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df1, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
R <- 0
q <- 0.1 # pourcentage of guranteed mana peering
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if (sum(mana[(i+1):j])<q){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df2 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor("guaranteed mana"))
npp <- ggplot(df2, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df2, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
n <- 100   #number of nodes
### guranteed mana peering
R <- 0
q <- 0.1 # pourcentage of guranteed mana peering
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if (sum(mana[(i+1):j])<q){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df2 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor("guaranteed mana"))
npp <- ggplot(df2, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df2, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
### guranteed mana peering
R <- 0
q <- 0.1 # pourcentage of guranteed mana peering
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if (sum(mana[(i+1):j])<q){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df2 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor("guaranteed mana"))
npp <- ggplot(df2, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df2, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
rho <- 2
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((mana[i] < mana[j]*rho)){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df1 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor(rep("rho",n)))
npp <- ggplot(df1, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df1, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
n <- 100   #number of nodes
s <- 1 # Zipf paramter
zipf <- (1:n)^(-s)
mana <- zipf/sum(zipf)
R <- 0
R <- 0
q <- 0.1 # pourcentage of guranteed mana peering
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if (sum(mana[(i+1):j])<q){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df2 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor("guaranteed mana"))
npp <- ggplot(df2, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df2, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
rho <- 2
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((mana[i] < mana[j]*rho)){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df1 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor(rep("rho",n)))
npp <- ggplot(df1, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df1, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
n <- 10000   #number of nodes
s <- 1 # Zipf paramter
zipf <- (1:n)^(-s)
mana <- zipf/sum(zipf)
R <- 0   #minimal amount of possible peers to the up and to the down, i.e. at least 2R possible peers
rho <- 2
possiblePeers <- matrix(0, n, n)
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((mana[i] < mana[j]*rho)){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else if ((j-i)<=R){
possiblePeers[i,j] <- 1
possiblePeers[j,i] <- 1
} else break
}
}
numberPossiblePeers <- apply(possiblePeers,1, sum)
possiblePeersMana <- t(mana *possiblePeers)
manaPossiblePeers <- apply(possiblePeersMana,1, sum)
df1 <- data.frame(logMana = log10(mana),
numberPossiblePeers=numberPossiblePeers,
manaPossiblePeers=manaPossiblePeers,
nodeId=1:n,
type=as.factor(rep("rho",n)))
npp <- ggplot(df1, aes(nodeId, numberPossiblePeers))+
geom_line()+
ylim(0,n)
mpp <- ggplot(df1, aes(nodeId, manaPossiblePeers))+
geom_line()+
ylim(0,1)
ggarrange(npp, mpp)
library("rjson")
result <- fromJSON(file = "Assembly.txt")
data <- data.frame(address = character(length(result)),
balance = numeric(length(result)))
library("rjson")
result <- fromJSON(file = "Assembly.txt")
setwd("~/Downloads")
library("rjson")
result <- fromJSON(file = "Assembly.txt")
data <- data.frame(address = character(length(result)),
balance = numeric(length(result)))
address = character(length(result))
balance =  numeric(length(result))
for (i in 1:length(result)) {
address[i] = (result[[i]]$address)
balance[i] = result[[i]]$balance
}
data <- data.frame(address = as.character(address),
balance = balance)
library(dplyr)
df <-filter(data, address=="13a2yu6VG9JoXa4sSH2Jn17MEQJcMiax8YiKArWWWa7zK" |
address == "19enRjPMYBrWRFuYGG9nxiaBQDqcbHExWcK6rK8M2T52i" |
address == "18ADYLFgMWKArJeDSEZ7ZanaUuSQaFMn9PMRME5188sCR"|
address =="198kfr65okj6wc4mG2bVYCPbhY4gEXPxnL7upDgTZNvYE"|
address == "1CcZHYiyj4mtSWpV5ru5zjmYk6Ud4AQTHuG4W6ERuhABd")
ownToken = sum(df$balance)
ownToken/sum(balance) * 400000000
400000000 * 0.11
400000000 * 0.11 /1000000
400000000 * 0.01
ownToken/sum(balance)
2*5 + 3* 23 + 4*972
3*31 + 4*969
log(0.211 / 0.117) + log(1)
3*3*7*5
setwd("~/go/SimulationsAutoPeeringNetworkWithMana")
library(tidyverse)
data <- read.table(diameter.txt)
setwd("~/go/SimulationsAutoPeeringNetworkWithMana/data")
data <- read.table(diameter.txt)
data <- read.table("diameter.txt")
View(data)
colnames(data) = c("N","k", "q", "s", "diam")
View(data)
data <- read.table("diameter.txt")
colnames(data) = c("N","k","R", "q", "s", "diam")
head(data)
data %>%
group_by(k,R,q,s) %>%
summarise(diam = mean(diam))
df <- data %>%
group_by(k,R,q,s) %>%
summarise(diam = mean(diam))
df
dfpplot <- filter(k==4, R==20 )
dfpplot <- filter(df, k==4, R==20 )
dfplot <- filter(df, k==4, R==20 )
dfplot
dfplot <- filter(df, k==4, R==20, q==1 )
ggplot(df, aes(x=s, y=diam)) +
geom_line()
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
dfplot
dfplot <- filter(df, k==4, R==20, q==0.1 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
dfplot <- filter(df, k==4, R==40, q==0.1 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
dfplot <- filter(df, k==4, R==40, q==0.3 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
dfplot <- filter(df, k==4, R==40, q==0.2 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
dfplot
dfplot <- filter(df, k==4, R==40, q==0.3 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
dfplot <- filter(df, k==4, R==40, q==0.5 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
dfplot <- filter(df, k==4, R==40, q==0.1 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
data <- read.table("diameter.txt")
colnames(data) = c("N","k","R", "q", "s", "diam")
df <- data %>%
group_by(k,R,q,s) %>%
summarise(diam = mean(diam))
dfplot <- filter(df, k==4, R==40, q==0.1 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
View(df1)
df
dfplot <- filter(df, k==4, R==40, q==0.1 )
dfplot <- filter(df, k==4, R==20, q==0.1 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
data <- read.table("diameter.txt")
colnames(data) = c("N","k","R", "q", "s", "diam")
df <- data %>%
group_by(k,R,q,s) %>%
summarise(diam = mean(diam))
dfplot <- filter(df, k==4, R==20, q==0.1 )
ggplot(dfplot, aes(x=s, y=diam)) +
geom_line()
783/5550
3*4600
13800*4
setwd("~/go/res-attack-analysis-go")
data <- read.table("data.txt")
data
colnames(data) <- c("s", "confirmationTime", "numberTips")
library(ggplot2)
ggplot(data, geom(x=s, y=confrmationTime))+
geom_line()
ggplot(data, aes(x=s, y=confrmationTime))+
geom_line()
data <- read.table("data.txt")
colnames(data) <- c("s", "confirmationTime", "numberTips")
ggplot(data, aes(x=s, y=confrmationTime))+
geom_line()
ggplot(data, aes(x=s, y=confirmationTime))+
geom_line()
ggplot(data, aes(x=s, y=confirmationTime/1000))+
geom_line()
data <- read.table("data.txt")
colnames(data) <- c("s", "confirmationTime", "numberTips")
data$confirmationTime <- data$confirmationTime/1000
ggplot(data, aes(x=s, y=confirmationTime))+
geom_line()
data <- read.table("data.txt")
colnames(data) <- c("s", "confirmationTime", "numberTips")
data$confirmationTime <- data$confirmationTime/1000
ggplot(data, aes(x=s, y=confirmationTime))+
geom_line()
